/*
  # Rename sales_order table to sale_orders

  1. Changes
    - Drop existing view
    - Drop existing table
    - Create new table with updated name
    - Recreate view with new table name
    - Add security policies

  2. Security
    - Enable RLS on new table
    - Add policies for authenticated users
*/

-- Drop existing view
DROP VIEW IF EXISTS sales_order_with_customer;

-- Drop existing table
DROP TABLE IF EXISTS sales_order;

-- Create new table with updated name
CREATE TABLE sale_orders (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  customer_id bigint NULL,
  total_qtt bigint NULL,
  total_amt double precision NULL,
  item_id bigint[] NULL,
  item_qtt bigint[] NULL,
  item_price double precision[] NULL,
  item_disc double precision[] NULL,
  item_tot_price double precision[] NULL,
  company_id bigint NULL,
  status text NULL DEFAULT 'pending',
  due_date timestamp with time zone NULL,
  CONSTRAINT sale_orders_pkey PRIMARY KEY (id),
  CONSTRAINT sale_orders_company_id_fkey FOREIGN KEY (company_id) REFERENCES company(id),
  CONSTRAINT sale_orders_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES customer(id)
) TABLESPACE pg_default;

-- Enable RLS
ALTER TABLE sale_orders ENABLE ROW LEVEL SECURITY;

-- Create view with new table name
CREATE VIEW sale_orders_with_customer AS
SELECT 
  so.*,
  c.name as customer_name
FROM sale_orders so
LEFT JOIN customer c ON c.id = so.customer_id;

-- Set security on view
ALTER VIEW sale_orders_with_customer SET (security_invoker = true);

-- Add policies
CREATE POLICY "Allow read access to authenticated users"
  ON sale_orders
  FOR SELECT
  TO authenticated
  USING (true);

CREATE POLICY "Allow read access to authenticated users on view"
  ON sale_orders_with_customer
  FOR SELECT
  TO authenticated
  USING (true);